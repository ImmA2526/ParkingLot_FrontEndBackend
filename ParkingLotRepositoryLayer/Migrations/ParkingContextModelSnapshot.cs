// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ParkingLotRepositoryLayer;

namespace ParkingLotRepositoryLayer.Migrations
{
    [DbContext(typeof(ParkingContext))]
    partial class ParkingContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.14-servicing-32113")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ParkingLotModelLayer.DriverTypeModel", b =>
                {
                    b.Property<int>("DriverTypeID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Charges");

                    b.Property<string>("DriverType");

                    b.HasKey("DriverTypeID");

                    b.ToTable("DriverTypeTable");
                });

            modelBuilder.Entity("ParkingLotModelLayer.ParkingModel", b =>
                {
                    b.Property<int>("ParkingId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Charges");

                    b.Property<int>("DriverTypeID");

                    b.Property<int>("EntryTime");

                    b.Property<int>("ExitTime");

                    b.Property<bool>("IsEmpty");

                    b.Property<int>("ParkTypeID");

                    b.Property<int>("SlotNo");

                    b.Property<int>("VehicalNo");

                    b.Property<int>("VehicleTypeID");

                    b.HasKey("ParkingId");

                    b.ToTable("ParkingTable");
                });

            modelBuilder.Entity("ParkingLotModelLayer.ParkingTypeModel", b =>
                {
                    b.Property<int>("ParkTypeID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Charges");

                    b.Property<string>("ParkingType")
                        .IsRequired();

                    b.HasKey("ParkTypeID");

                    b.ToTable("ParkingTypeTable");
                });

            modelBuilder.Entity("ParkingLotModelLayer.UserModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email");

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<string>("LastName")
                        .IsRequired();

                    b.Property<string>("Password")
                        .IsRequired();

                    b.Property<string>("Role")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("UserTable");
                });

            modelBuilder.Entity("ParkingLotModelLayer.VehicalTypeModel", b =>
                {
                    b.Property<int>("VehicleTypeID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Charges");

                    b.Property<string>("VehicalType");

                    b.HasKey("VehicleTypeID");

                    b.ToTable("VehicalTypeTable");
                });
#pragma warning restore 612, 618
        }
    }
}
